{
    "version": 3,
    "sources": [
        "../src/util.js"
    ],
    "names": [
        "nacl",
        "require",
        "util",
        "ethSigUtil",
        "ALGO_VERSION",
        "genKeyPair",
        "keys",
        "box",
        "keyPair",
        "privateKey",
        "encodeBase64",
        "secretKey",
        "publicKey",
        "encrypt",
        "pubKeyTo",
        "data",
        "encryptSafely",
        "decrypt",
        "privKey",
        "encrypted",
        "decryptSafely",
        "decodeBase64",
        "truffleHack",
        "contract",
        "currentProvider",
        "sendAsync",
        "send",
        "apply",
        "arguments"
    ],
    "mappings": ";;;;;AAAA,IAAMA,OAAOC,QAAQ,WAAR,CAAb;AACAD,KAAKE,IAAL,GAAYD,QAAQ,gBAAR,CAAZ;AACA,IAAME,aAAaF,QAAQ,cAAR,CAAnB;;AAEA,IAAMG,eAAe,0BAArB;;AAEA;;;;;AAKA,IAAMC,aAAa,SAAbA,UAAa,GAAM;AACvB,MAAMC,OAAON,KAAKO,GAAL,CAASC,OAAT,EAAb;AACA,SAAO;AACLC,gBAAYT,KAAKE,IAAL,CAAUQ,YAAV,CAAuBJ,KAAKK,SAA5B,CADP;AAELC,eAAWZ,KAAKE,IAAL,CAAUQ,YAAV,CAAuBJ,KAAKM,SAA5B;AAFN,GAAP;AAID,CAND;;AAQA;;;;;;;AAOA,IAAMC,UAAU,SAAVA,OAAU,CAACC,QAAD,EAAWC,IAAX;AAAA,SAAoBZ,WAAWa,aAAX,CAAyBF,QAAzB,EAAmC,EAAEC,UAAF,EAAnC,EAA6CX,YAA7C,CAApB;AAAA,CAAhB;;AAEA;;;;;;;AAOA,IAAMa,UAAU,SAAVA,OAAU,CAACC,OAAD,EAAUC,SAAV;AAAA,SAAwBhB,WAAWiB,aAAX,CAAyBD,SAAzB,EAAoCnB,KAAKE,IAAL,CAAUmB,YAAV,CAAuBH,OAAvB,CAApC,CAAxB;AAAA,CAAhB;;AAEA;;AAEA,IAAMI,cAAc,SAAdA,WAAc,CAACC,QAAD,EAAc;AAChC,MAAI,OAAOA,SAASC,eAAT,CAAyBC,SAAhC,KAA8C,UAAlD,EAA8D;AAC5DF,aAASC,eAAT,CAAyBC,SAAzB,GAAqC,YAAY;AAC/C,aAAOF,SAASC,eAAT,CAAyBE,IAAzB,CAA8BC,KAA9B,CAAoCJ,SAASC,eAA7C,EAA8DI,SAA9D,CAAP;AACD,KAFD;AAGD;AACD,SAAOL,QAAP;AACD,CAPD;;AASA;;kBAEe;AACblB,wBADa;AAEbQ,kBAFa;AAGbI,kBAHa;AAIbK;AAJa,C",
    "file": "util.js",
    "sourcesContent": [
        "const nacl = require('tweetnacl');\nnacl.util = require('tweetnacl-util');\nconst ethSigUtil = require('eth-sig-util');\n\nconst ALGO_VERSION = 'x25519-xsalsa20-poly1305';\n\n/**\n * EIP 1098 (https://github.com/ethereum/EIPs/pull/1098)\n * Generate Keys\n * @returns {JSON} with publicKey and privateKey\n */\nconst genKeyPair = () => {\n  const keys = nacl.box.keyPair();\n  return {\n    privateKey: nacl.util.encodeBase64(keys.secretKey),\n    publicKey: nacl.util.encodeBase64(keys.publicKey),\n  };\n};\n\n/**\n * EIP 1098 (https://github.com/ethereum/EIPs/pull/1098)\n * Encrypt\n * @param {String} pubKeyTo\n * @param {JSON} data Data to be encrypted (Has to be JSON Object)\n * @returns {JSON} Encrypted message\n */\nconst encrypt = (pubKeyTo, data) => ethSigUtil.encryptSafely(pubKeyTo, { data }, ALGO_VERSION);\n\n/**\n * EIP 1098 (https://github.com/ethereum/EIPs/pull/1098)\n * Decrypt\n * @param {String} privKey\n * @param {String} encrypted Encrypted message\n * @returns {String} plaintext\n */\nconst decrypt = (privKey, encrypted) => ethSigUtil.decryptSafely(encrypted, nacl.util.decodeBase64(privKey));\n\n/* eslint-disable */\n\nconst truffleHack = (contract) => {\n  if (typeof contract.currentProvider.sendAsync !== 'function') {\n    contract.currentProvider.sendAsync = function () {\n      return contract.currentProvider.send.apply(contract.currentProvider, arguments);\n    };\n  }\n  return contract;\n};\n\n/* eslint-enable */\n\nexport default {\n  genKeyPair,\n  encrypt,\n  decrypt,\n  truffleHack,\n};\n"
    ]
}