{"version":3,"sources":["../src/record.js"],"names":["Record","contracts","dataHash","owner","metadataHash","sigCount","irisScore","dataUri","timestamp","attestator","_recordsFunctions","getAttestation","records","viewer","_permissionsFunctions","getPermission","permissions","privKey","uriResolver","ciphertext","plaintext","_util","decrypt","verifyData","Error","perm","canAccess","eutil","bufferToHex","keccak256","pubKey","decryptData","encryptedData","encrypt","recordsContract","permissionsContract","getRecord","r"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEMA,M;AACJ,kBACEC,SADF,EACaC,QADb,EACuBC,KADvB,EAC8BC,YAD9B,EAC4CC,QAD5C,EACsDC,SADtD,EAEEC,OAFF,EAEWC,SAFX,EAGE;AAAA;;AACA,SAAKP,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAED;;;;;;;;;;2GAKqBC,U;;;;;iDACZC,kBAAkBC,cAAlB,CAAiC,KAAKV,SAAL,CAAeW,OAAhD,EAAyD,KAAKV,QAA9D,EAAwEO,UAAxE,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;6GAKoBI,M;;;;;kDACXC,sBAAsBC,aAAtB,CAAoC,KAAKd,SAAL,CAAee,WAAnD,EAAgE,KAAKd,QAArE,EAA+EW,MAA/E,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;6GAMkBI,O,EAASC,W;;;;;;;uBACAA,YAAY,KAAKX,OAAjB,C;;;AAAnBY,0B;AACAC,yB,GAAYC,eAAMC,OAAN,CAAcL,OAAd,EAAuBE,UAAvB,C;AAClB;;oBACK,KAAKI,UAAL,CAAgBH,SAAhB,C;;;;;sBACG,IAAII,KAAJ,CAAU,8BAAV,C;;;kDAEDJ,S;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;6GAO0BP,M,EAAQI,O,EAASC,W;;;;;;;uBAEtB,KAAKH,aAAL,CAAmBF,MAAnB,C;;;AAAbY,oB;;oBACDA,KAAKC,S;;;;;sBACF,IAAIF,KAAJ,CAAU,2CAAV,C;;;;uBAEiBN,YAAYO,KAAKlB,OAAjB,C;;;AAAnBY,0B;AACAC,yB,GAAYC,eAAMC,OAAN,CAAcL,OAAd,EAAuBE,UAAvB,C;;oBACb,KAAKI,UAAL,CAAgBH,SAAhB,C;;;;;sBACG,IAAII,KAAJ,CAAU,8BAAV,C;;;kDAEDJ,S;;;;;;;;;;;;;;;;;AAGT;;;;;;;;+BAKWA,S,EAAW;AACpB,aAAOO,yBAAMC,WAAN,CAAkBD,yBAAME,SAAN,CAAgBT,SAAhB,CAAlB,MAAkD,KAAKlB,QAA9D;AACD;;AAED;;;;;;;;;;;6GAOoB4B,M,EAAQb,O,EAASC,W;;;;;;;uBACX,KAAKa,WAAL,CAAiBd,OAAjB,EAA0BC,WAA1B,C;;;AAAlBE,yB;AACAY,6B,GAAgBX,eAAMY,OAAN,CAAcH,MAAd,EAAsBV,SAAtB,C;kDACfY,a;;;;;;;;;;;;;;;;;;;6GAGiBE,e,EAAiBC,mB,EAAqBjC,Q;;;;;;;uBAC9CQ,kBAAkB0B,SAAlB,CAA4BF,eAA5B,EAA6ChC,QAA7C,C;;;AAAVmC,iB;AACApC,yB,GAAY;AAChBW,2BAASsB,eADO;AAEhBlB,+BAAamB;AAFG,iB;kDAIX,IAAInC,MAAJ,CACLC,SADK,EACMC,QADN,EACgBmC,EAAElC,KADlB,EACyBkC,EAAEjC,YAD3B,EAELiC,EAAEhC,QAFG,EAEOgC,EAAE/B,SAFT,EAEoB+B,EAAE9B,OAFtB,EAE+B8B,EAAE7B,SAFjC,C;;;;;;;;;;;;;;;;;;;;kBAOIR,M","file":"record.js","sourcesContent":["import eutil from 'ethereumjs-util';\nimport _recordsFunctions from './records';\nimport _permissionsFunctions from './permissions';\nimport _util from './util';\n\nclass Record {\n  constructor(\n    contracts, dataHash, owner, metadataHash, sigCount, irisScore,\n    dataUri, timestamp,\n  ) {\n    this.contracts = contracts;\n    this.dataHash = dataHash;\n    this.owner = owner;\n    this.metadataHash = metadataHash;\n    this.sigCount = sigCount;\n    this.irisScore = irisScore;\n    this.dataUri = dataUri;\n    this.timestamp = timestamp;\n  }\n\n  /**\n   * Get the attestation of the record from a specified attestator\n   * @param {String} attestator Address of the attestator\n   * @returns {Promise<Boolean>}\n   */\n  async getAttestation(attestator) {\n    return _recordsFunctions.getAttestation(this.contracts.records, this.dataHash, attestator);\n  }\n\n  /**\n   * Get the permission of the record for a viewer\n   * @param {String} viewer Address of the viewer\n   * @returns {Promise<{canAccess: Boolean, dataUri: String}>}\n   */\n  async getPermission(viewer) {\n    return _permissionsFunctions.getPermission(this.contracts.permissions, this.dataHash, viewer);\n  }\n\n  /**\n   * Gets the plaintext data of this record\n   * @param {String} privKey Private key to decrypt the data\n   * @param {Function} uriResolver Async function that takes a data URI string and returns the data\n   * @returns {String} Plaintext data\n   */\n  async decryptData(privKey, uriResolver) {\n    const ciphertext = await uriResolver(this.dataUri);\n    const plaintext = _util.decrypt(privKey, ciphertext);\n    // check hash\n    if (!this.verifyData(plaintext)) {\n      throw new Error('plaintext data hash mismatch');\n    }\n    return plaintext;\n  }\n\n  /**\n   * Gets the plaintext data of a permissioned copy of the record\n   * @param {String} viewer Address of the viewer\n   * @param {String} privKey Private key to decrypt the data\n   * @param {Function} uriResolver Async function that takes a data URI string and returns the data\n   * @returns {String} Plaintext data\n   */\n  async decryptPermissioned(viewer, privKey, uriResolver) {\n    // get the permissioned data URI\n    const perm = await this.getPermission(viewer);\n    if (!perm.canAccess) {\n      throw new Error('viewer has no permission to view the data');\n    }\n    const ciphertext = await uriResolver(perm.dataUri);\n    const plaintext = _util.decrypt(privKey, ciphertext);\n    if (!this.verifyData(plaintext)) {\n      throw new Error('plaintext data hash mismatch');\n    }\n    return plaintext;\n  }\n\n  /**\n   * Verifies data against the data hash in Linnia\n   * @param {Buffer|String} plaintext Plaintext data to be verified\n   * @returns {Boolean} True if data hash matches\n   */\n  verifyData(plaintext) {\n    return eutil.bufferToHex(eutil.keccak256(plaintext)) === this.dataHash;\n  }\n\n  /**\n   * Re-encrypts the data to another public key\n   * @param {String} pubKey Public key to re-encrypt the data to\n   * @param {String} privKey Private key to decrypt the record data\n   * @param {Function} uriResolver Async function that takes a data URI string and returns the data\n   * @returns {String} Re-encrypted data\n   */\n  async reencryptData(pubKey, privKey, uriResolver) {\n    const plaintext = await this.decryptData(privKey, uriResolver);\n    const encryptedData = _util.encrypt(pubKey, plaintext);\n    return encryptedData;\n  }\n\n  static async fromContract(recordsContract, permissionsContract, dataHash) {\n    const r = await _recordsFunctions.getRecord(recordsContract, dataHash);\n    const contracts = {\n      records: recordsContract,\n      permissions: permissionsContract,\n    };\n    return new Record(\n      contracts, dataHash, r.owner, r.metadataHash,\n      r.sigCount, r.irisScore, r.dataUri, r.timestamp,\n    );\n  }\n}\n\nexport default Record;\n"]}