{"version":3,"sources":["../src/linnia.js"],"names":["Linnia","web3","opt","_hub","LinniaContractUpgradeHub","_users","LinniaUsers","_records","LinniaRecords","_permissions","LinniaPermissions","setProvider","currentProvider","_util","truffleHack","_hubAddress","linniaContractUpgradeHubAddress","_tokenAddress","linniaTokenContractAddress","_getHubInstance","hubInstance","usersContract","usersAddress","recordsContract","recordsAddress","permissionsContract","permissionsAddress","at","_linniaContractUpgradeHub","users","records","permissions","dataHash","getContractInstances","Record","fromContract","metadata","dataUri","ethParams","_recordsFunctions","addRecord","addRecordWithReward","attestatorAddress","getAttestation","signRecord","viewerAddress","_permissionsFunctions","getPermission","deployed","util"],"mappings":"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","file":"linnia.js","sourcesContent":["import TruffleContract from 'truffle-contract';\n\nimport LinniaContractUpgradeHub from '@linniaprotocol/linnia-smart-contracts/build/contracts//LinniaHub.json';\nimport LinniaUsers from '@linniaprotocol/linnia-smart-contracts/build/contracts//LinniaUsers.json';\nimport LinniaRecords from '@linniaprotocol/linnia-smart-contracts/build/contracts//LinniaRecords.json';\nimport LinniaPermissions from '@linniaprotocol/linnia-smart-contracts/build/contracts//LinniaPermissions.json';\n\nimport Record from './record';\nimport _recordsFunctions from './records';\nimport _permissionsFunctions from './permissions';\nimport _util from './util';\n\n/**\n * Linnia API object\n */\nclass Linnia {\n  /**\n   * Create a new Linnia API object\n   * @param {Object} web3 An instantiated web3 API object\n   * @param {?{?linniaContractUpgradeHubAddress: String}} opt Optional constructor options\n   * @returns {Linnia} Created Linnia API object\n   */\n  constructor(web3, opt = {}) {\n    this.web3 = web3;\n    // truffle contracts\n    const _hub = TruffleContract(LinniaContractUpgradeHub);\n    const _users = TruffleContract(LinniaUsers);\n    const _records = TruffleContract(LinniaRecords);\n    const _permissions = TruffleContract(LinniaPermissions);\n    _hub.setProvider(web3.currentProvider);\n    _users.setProvider(web3.currentProvider);\n    _records.setProvider(web3.currentProvider);\n    _permissions.setProvider(web3.currentProvider);\n    this._hub = _util.truffleHack(_hub);\n    this._users = _util.truffleHack(_users);\n    this._records = _util.truffleHack(_records);\n    this._permissions = _util.truffleHack(_permissions);\n    // set linniaContractUpgradeHubAddress address\n    // using user defined address\n    this._hubAddress = opt.linniaContractUpgradeHubAddress;\n    this._tokenAddress = opt.linniaTokenContractAddress;\n  }\n\n  /**\n   * Get Linnia contract instances, wrapped in truffle contract\n   * @returns {Promise<{hub: Object, users: Object, records: Object, permissions: Object}>}\n   */\n  async getContractInstances() {\n    const hubInstance = await this._getHubInstance();\n    const usersAddress = await hubInstance.usersContract();\n    const recordsAddress = await hubInstance.recordsContract();\n    const permissionsAddress = await hubInstance.permissionsContract();\n    return {\n      _linniaContractUpgradeHub: hubInstance,\n      users: await this._users.at(usersAddress),\n      records: await this._records.at(recordsAddress),\n      permissions: await this._permissions.at(permissionsAddress),\n    };\n  }\n\n  /**\n   * Get a record from Linnia by data hash\n   * @param {String} dataHash hex-encoded data hash, 0x prefixed\n   * @returns {Promise<Record>}\n   */\n  async getRecord(dataHash) {\n    const { records, permissions } = await this.getContractInstances();\n    return Record.fromContract(records, permissions, dataHash);\n  }\n\n  /**\n   * Add a record from Linnia by data hash\n   * @param {String} dataHash hash of the plain text data + metadata\n   * @param {Object} metadata public information about the data\n   * @param {String} dataUri link to the data (eg. the IPFS hash)\n   * @param {Object} ethParams ethereum account params\n   * @returns {Promise<Record>}\n   */\n  async addRecord(dataHash, metadata, dataUri, ethParams) {\n    const { records, users } = await this.getContractInstances();\n    return _recordsFunctions.addRecord(\n      records,\n      users,\n      dataHash,\n      metadata,\n      dataUri,\n      ethParams,\n    );\n  }\n\n  /**\n   * Add a record from Linnia by data hash\n   * @param {String} dataHash hash of the plain text data + metadata\n   * @param {Object} metadata public information about the data\n   * @param {String} dataUri link to the data (eg. the IPFS hash)\n   * @param {Object} ethParams ethereum account params\n   * @returns {Promise<Record>}\n   */\n  async addRecordWithReward(dataHash, metadata, dataUri, ethParams) {\n    const { records, users } = await this.getContractInstances();\n    return _recordsFunctions.addRecordWithReward(\n      records,\n      users,\n      dataHash,\n      metadata,\n      dataUri,\n      this._tokenAddress,\n      ethParams,\n    );\n  }\n\n  /**\n    * Get record attestation from Linnia\n    * @param {String} dataHash hex-encoded data hash, 0x prefixed\n    * @returns {Promise<Boolean>} True if attested by specified user\n   */\n  async getAttestation(dataHash, attestatorAddress) {\n    const { records } = await this.getContractInstances();\n    return _recordsFunctions.getAttestation(records, dataHash, attestatorAddress);\n  }\n\n  /**\n   * Sign a record (add attestation)\n   * @param {String} dataHash hex-encoded data hash, 0x prefixed\n   * @param {Object} ethParams ethereum account params\n   * @returns {Promise<Attestation>}\n   */\n  async signRecord(dataHash, ethParams) {\n    const { records, users } = await this.getContractInstances();\n    return _recordsFunctions.signRecord(records, users, dataHash, ethParams);\n  }\n\n  /**\n   * Get permission information of a record\n   * @param {String} dataHash hex-encoded data hash, 0x prefixed\n   * @param {String} viewerAddress hex-encoded ethereum address\n   * @returns {Promise<{canAccess: Boolean, dataUri: String}>}\n   */\n  async getPermission(dataHash, viewerAddress) {\n    const { permissions } = await this.getContractInstances();\n    return _permissionsFunctions.getPermission(permissions, dataHash, viewerAddress);\n  }\n\n  /**\n   * Internal DO NOT USE\n   * @returns {Promise<*>}\n   * @private\n   */\n  async _getHubInstance() {\n    // get linniaContractUpgradeHubAddress contract instance\n    // look up address either from user defined address or artifact\n    if (this._hubAddress) {\n      return this._hub.at(this._hubAddress);\n    }\n    return this._hub.deployed();\n  }\n}\n\nLinnia.util = _util;\n\nexport default Linnia;\n"]}