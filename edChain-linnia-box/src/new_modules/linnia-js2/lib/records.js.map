{"version":3,"sources":["../src/records.js"],"names":["getRecord","recordsContract","dataHash","records","call","res","owner","metadataHash","sigCount","irisScore","dataUri","timestamp","Date","addRecordWithReward","usersContract","metadata","tokenAddress","ethParams","Error","from","isUser","addRecordwithReward","message","addRecord","signRecord","provenanceOf","provenance","record","sigExists","addSigByProvider","Attestation","getAttestation","attestator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA;AAAA,sFAAY,iBAAOC,eAAP,EAAwBC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACED,gBAAgBE,OAAhB,CAAwBC,IAAxB,CAA6BF,QAA7B,CADF;;AAAA;AACVG,eADU;AAEVC,iBAFU,GAEFD,IAAI,CAAJ,CAFE;AAGVE,wBAHU,GAGKF,IAAI,CAAJ,CAHL;AAIVG,oBAJU,GAICH,IAAI,CAAJ,CAJD;AAKVI,qBALU,GAKEJ,IAAI,CAAJ,CALF;AAMVK,mBANU,GAMAL,IAAI,CAAJ,CANA;AAOVM,qBAPU,GAOE,IAAIC,IAAJ,CAASP,IAAI,CAAJ,IAAS,IAAlB,CAPF;AAAA,6CAQT;AACLC,0BADK;AAELC,wCAFK;AAGLC,gCAHK;AAILC,kCAJK;AAKLC,8BALK;AAMLC;AANK,aARS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAkBA,IAAME;AAAA,uFAAsB,kBAC1BZ,eAD0B,EAE1Ba,aAF0B,EAG1BZ,QAH0B,EAI1Ba,QAJ0B,EAK1BL,OAL0B,EAM1BM,YAN0B,EAO1BC,SAP0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQrBD,YARqB;AAAA;AAAA;AAAA;;AAAA,kBASlB,IAAIE,KAAJ,CAAU,qEAAV,CATkB;;AAAA;AAAA,gBAarBD,UAAUE,IAbW;AAAA;AAAA;AAAA;;AAAA,kBAclB,IAAID,KAAJ,CAAU,gDAAV,CAdkB;;AAAA;AAAA;AAAA,mBAkBLJ,cAAcM,MAAd,CAAqBH,UAAUE,IAA/B,CAlBK;;AAAA;AAkBpBC,kBAlBoB;;AAAA,gBAmBrBA,MAnBqB;AAAA;AAAA;AAAA;;AAAA,kBAoBlB,IAAIF,KAAJ,CAAU,yCAAV,CApBkB;;AAAA;AAAA,kBAwBtB,QAAOH,QAAP,uDAAOA,QAAP,OAAoB,QAxBE;AAAA;AAAA;AAAA;;AAAA,kBAyBlB,IAAIG,KAAJ,CAAU,kCAAV,CAzBkB;;AAAA;AAAA;AAAA;AAAA,mBA6BlBjB,gBAAgBoB,mBAAhB,CAAoCnB,QAApC,EAA8C,yBAAea,QAAf,CAA9C,EAAwEL,OAAxE,EAAiFM,YAAjF,EAA+FC,SAA/F,CA7BkB;;AAAA;AAAA,8CA8BjBjB,UAAUC,eAAV,EAA2BC,QAA3B,CA9BiB;;AAAA;AAAA;AAAA;;AAAA,kBAgCpB,aAAEoB,OAAF,KAAc,+BAhCM;AAAA;AAAA;AAAA;;AAAA,kBAiChB,IAAIJ,KAAJ,CAAU,sFAAV,CAjCgB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAwCA,IAAMK;AAAA,uFAAY,kBAChBtB,eADgB,EAEhBa,aAFgB,EAGhBZ,QAHgB,EAIhBa,QAJgB,EAKhBL,OALgB,EAMhBO,SANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQXA,UAAUE,IARC;AAAA;AAAA;AAAA;;AAAA,kBASR,IAAID,KAAJ,CAAU,gDAAV,CATQ;;AAAA;AAAA;AAAA,mBAaKJ,cAAcM,MAAd,CAAqBH,UAAUE,IAA/B,CAbL;;AAAA;AAaVC,kBAbU;;AAAA,gBAcXA,MAdW;AAAA;AAAA;AAAA;;AAAA,kBAeR,IAAIF,KAAJ,CAAU,yCAAV,CAfQ;;AAAA;AAAA,kBAmBZ,QAAOH,QAAP,uDAAOA,QAAP,OAAoB,QAnBR;AAAA;AAAA;AAAA;;AAAA,kBAoBR,IAAIG,KAAJ,CAAU,kCAAV,CApBQ;;AAAA;AAAA;AAAA;AAAA,mBAwBRjB,gBAAgBsB,SAAhB,CAA0BrB,QAA1B,EAAoC,yBAAea,QAAf,CAApC,EAA8DL,OAA9D,EAAuEO,SAAvE,CAxBQ;;AAAA;AAAA,8CAyBPjB,UAAUC,eAAV,EAA2BC,QAA3B,CAzBO;;AAAA;AAAA;AAAA;;AAAA,kBA2BV,aAAEoB,OAAF,KAAc,+BA3BJ;AAAA;AAAA;AAAA;;AAAA,kBA4BN,IAAIJ,KAAJ,CAAU,sFAAV,CA5BM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAmCA,IAAMM;AAAA,uFAAa,kBAAOvB,eAAP,EAAwBa,aAAxB,EAAuCZ,QAAvC,EAAiDe,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEZA,UAAUE,IAFE;AAAA;AAAA;AAAA;;AAAA,kBAGT,IAAID,KAAJ,CAAU,gDAAV,CAHS;;AAAA;AAAA;AAAA,mBAOIJ,cAAcM,MAAd,CAAqBH,UAAUE,IAA/B,CAPJ;;AAAA;AAOXC,kBAPW;;AAAA,gBAQZA,MARY;AAAA;AAAA;AAAA;;AAAA,kBAST,IAAIF,KAAJ,CAAU,yCAAV,CATS;;AAAA;AAAA;AAAA,mBAaQJ,cAAcW,YAAd,CAA2BR,UAAUE,IAArC,CAbR;;AAAA;AAaXO,sBAbW;;AAAA,gBAcXA,aAAa,CAdF;AAAA;AAAA;AAAA;;AAAA,kBAeT,IAAIR,KAAJ,CAAU,4DAAV,CAfS;;AAAA;AAAA;AAAA,mBAmBIlB,UAAUC,eAAV,EAA2BC,QAA3B,CAnBJ;;AAAA;AAmBXyB,kBAnBW;;AAAA,kBAoBbA,OAAOrB,KAAP,KAAiB,4CApBJ;AAAA;AAAA;AAAA;;AAAA,kBAqBT,IAAIY,KAAJ,CAAU,4BAAV,CArBS;;AAAA;AAAA;AAAA,mBAyBOjB,gBAAgB2B,SAAhB,CAA0B1B,QAA1B,EAAoCe,UAAUE,IAA9C,CAzBP;;AAAA;AAyBXS,qBAzBW;;AAAA,iBA0BbA,SA1Ba;AAAA;AAAA;AAAA;;AAAA,kBA2BT,IAAIV,KAAJ,CAAU,8CAAV,CA3BS;;AAAA;AAAA;AAAA;AAAA,mBA+BTjB,gBAAgB4B,gBAAhB,CAAiC3B,QAAjC,EAA2Ce,SAA3C,CA/BS;;AAAA;AAAA,8CAgCR,IAAIa,qBAAJ,CAAgBb,UAAUE,IAA1B,EAAgCjB,QAAhC,CAhCQ;;AAAA;AAAA;AAAA;;AAAA,kBAkCX,aAAEoB,OAAF,KAAc,+BAlCH;AAAA;AAAA;AAAA;;AAAA,kBAmCP,IAAIJ,KAAJ,CAAU,sFAAV,CAnCO;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA0CA,IAAMa;AAAA,uFAAiB,kBACrB9B,eADqB,EACJC,QADI,EACM8B,UADN;AAAA;AAAA;AAAA;AAAA;AAAA,8CAElB/B,gBAAgB2B,SAAhB,CAA0BxB,IAA1B,CAA+BF,QAA/B,EAAyC8B,UAAzC,CAFkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAIe;AACbhC,sBADa;AAEbuB,sBAFa;AAGbV,0CAHa;AAIbkB,gCAJa;AAKbP;AALa,C","file":"records.js","sourcesContent":["import Attestation from './attestation';\n\nconst getRecord = async (recordsContract, dataHash) => {\n  const res = await recordsContract.records.call(dataHash);\n  const owner = res[0];\n  const metadataHash = res[1];\n  const sigCount = res[2];\n  const irisScore = res[3];\n  const dataUri = res[4];\n  const timestamp = new Date(res[5] * 1000);\n  return {\n    owner,\n    metadataHash,\n    sigCount,\n    irisScore,\n    dataUri,\n    timestamp,\n  };\n};\n\nconst addRecordWithReward = async (\n  recordsContract,\n  usersContract,\n  dataHash,\n  metadata,\n  dataUri,\n  tokenAddress,\n  ethParams) => {\n  if (!tokenAddress) {\n    throw new Error('tokenAddress not valid.  It is likely not set in linnia constructor');\n  }\n\n  // Check if there is from in the ethParams\n  if (!ethParams.from) {\n    throw new Error('ethParams object does not contain a \"from\" key');\n  }\n\n  // Check if the owner is a Linnia User\n  const isUser = await usersContract.isUser(ethParams.from);\n  if (!isUser) {\n    throw new Error('the address is not registered in Linnia');\n  }\n\n  // If metadata is not JSON\n  if (typeof metadata !== 'object') {\n    throw new Error('Metadata has to be a JSON object');\n  }\n\n  try {\n    await recordsContract.addRecordwithReward(dataHash, JSON.stringify(metadata), dataUri, tokenAddress, ethParams);\n    return getRecord(recordsContract, dataHash);\n  } catch (e) {\n    if (e.message === 'sender account not recognized') {\n      throw new Error('The web3 Instance that you pass to Linnia cannot sign a transaction for this address');\n    } else {\n      throw e;\n    }\n  }\n};\n\nconst addRecord = async (\n  recordsContract,\n  usersContract,\n  dataHash,\n  metadata,\n  dataUri,\n  ethParams) => {\n  // Check if there is from in the ethParams\n  if (!ethParams.from) {\n    throw new Error('ethParams object does not contain a \"from\" key');\n  }\n\n  // Check if the owner is a Linnia User\n  const isUser = await usersContract.isUser(ethParams.from);\n  if (!isUser) {\n    throw new Error('the address is not registered in Linnia');\n  }\n\n  // If metadata is not JSON\n  if (typeof metadata !== 'object') {\n    throw new Error('Metadata has to be a JSON object');\n  }\n\n  try {\n    await recordsContract.addRecord(dataHash, JSON.stringify(metadata), dataUri, ethParams);\n    return getRecord(recordsContract, dataHash);\n  } catch (e) {\n    if (e.message === 'sender account not recognized') {\n      throw new Error('The web3 Instance that you pass to Linnia cannot sign a transaction for this address');\n    } else {\n      throw e;\n    }\n  }\n};\n\nconst signRecord = async (recordsContract, usersContract, dataHash, ethParams) => {\n  // Check if there is from in the ethParams\n  if (!ethParams.from) {\n    throw new Error('ethParams object does not contain a \"from\" key');\n  }\n\n  // Check if the owner is a Linnia User\n  const isUser = await usersContract.isUser(ethParams.from);\n  if (!isUser) {\n    throw new Error('the address is not registered in Linnia');\n  }\n\n  // Check provenance of attestator\n  const provenance = await usersContract.provenanceOf(ethParams.from);\n  if (!(provenance > 0)) {\n    throw new Error('The attestor does not have provenance (Invalid Attestator)');\n  }\n\n  // Check if record exists\n  const record = await getRecord(recordsContract, dataHash);\n  if (record.owner === '0x0000000000000000000000000000000000000000') {\n    throw new Error('The record does not exists');\n  }\n\n  // Check if attestator have signed the record already\n  const sigExists = await recordsContract.sigExists(dataHash, ethParams.from);\n  if (sigExists) {\n    throw new Error('The attestor have already signed this record');\n  }\n\n  try {\n    await recordsContract.addSigByProvider(dataHash, ethParams);\n    return new Attestation(ethParams.from, dataHash);\n  } catch (e) {\n    if (e.message === 'sender account not recognized') {\n      throw new Error('The web3 Instance that you pass to Linnia cannot sign a transaction for this address');\n    } else {\n      throw e;\n    }\n  }\n};\n\nconst getAttestation = async (\n  recordsContract, dataHash, attestator,\n) => recordsContract.sigExists.call(dataHash, attestator);\n\nexport default {\n  getRecord,\n  addRecord,\n  addRecordWithReward,\n  getAttestation,\n  signRecord,\n};\n"]}